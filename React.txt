What is React?

React is javascript lib for building user interfaces.

User interface:

1.Desktop client
2.Browser based apps
3.Mobile apps
4.TV,Watch...

React focus for many ui technologies.

React is used now a days 
1.browser apps -React DOM - react.js
2.Mobile apps -React Native

React focus is less code,declarative.

React is built on many design patterns and principles
 =>Flex Design pattern.
 =>Component driven design

React tech stack.
 ES 6,HTML5,CSS 3
 JSX - lanaguage created by face book in order built declarative user interface.


ES 6:
 let const
 literals
 functional programming -higher order function
 object based programming features - objects,literals,classes,destructuring
 async programming features - callbacks,promises,async..await..

Types of User interface app development types (react apps):
1.Single page web app - spa
2.Full Stack /SSR - Server side rendering - Next.js / 
3.JAMStack/SSG (Static Site Generation) -Static content -Next.js/ Gatsby

Tools chains:
 To build different types of react apps we have tools.

1.create-react-app  - spa
2.Neutrino
3.Nx
4.Parcel
5.Razzle
6.Vite

When to select what tool?

if you are building spa - create-react-app
if you are building server-rendered app with node.js - next.js - nx
if you are building ssg apps - gatsby

package management tools

1.npm
2.npx
3.yarn

Project setup
Node.js
vs code

Create Project:
E:\session\pratian\dec22\ReactSession>npx create-react-app myapp


Components:
 Object, having properties and behaviours and user interface.
Componets are organized as tree -  compoent tree.

How to create components?

1.variable pattern
import React from 'react'
import ReactDOM from 'react-dom/client';

//variable pattern 
const Greeter = <h1>Greet</h1>



const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(Greeter);


2.functional pattern
import React from 'react'
import ReactDOM from 'react-dom/client';

// function Greeter() {
//     return <h1>Greeter</h1>
// }

// const Greeter = () => {
//     return <h1>Greeter</h1>
// }
const Greeter = () => <h1>Greeter</h1>

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Greeter />);

3.class pattern
import React from 'react'
import ReactDOM from 'react-dom/client';

// es 6 class 
class Greeter extends React.Component {
    render() {
        return <h1>Greeter!!</h1>
    }
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Greeter />);


Note:
 Now a days we never use class components only functional components.

....................................................................................
			Component Composition: Compoent tree model
....................................................................................

if you understand , html structure, you can understand component tree model.

Block of Ui:


<div>
<div>
  <div>
    <h1>Rice Atta & Dal<h1>	
  </div>
  <div>
    <h1>Rice Atta & Dal<h1>	
  </div>
<div>
<div>
  Recommendations
</div>
<div>
</div>

</div>

Component tree / Object tree

Header - Component -  User Interface---| Data - Biz logic
Adv - Component
Body -Component
 <Products> -Component
   <Category>
     <h1>Fresh Items
   </Category>
 </Products>

<Footer>

Project Structuring:
...................

src
 |
 components
  |
 assets
 models
 services
 
....................................................................................

Components are saved fileName.js / FileName.jsx - jsx is recommended

Note: 
 Inside root dir, App  /index /any component cant be saved as "jsx".

 index.js or App.js 

Barrel Export:
.............

folder
  -file1.js /jsx
  -file2.js
  -file3.js
  -file4.js

Without barrel export
when you import from another file

import {something} from './folder/file1'
import {something} from './folder/file2'
import {something} from './folder/file3'

With barrel export


folder
  -file1.js /jsx
  -file2.js
  -file3.js
  -file4.js
  -index.js

folder/index.js
 import { ProductList } from './products-list'
import { ProductRecommendation } from './productrecommendation'

//re export -barrel export

export { ProductList, ProductRecommendation }


src/
 index.js or any where you import.
.....................................................................................
				Data binding
.....................................................................................

User interface types:

1.static user interface
   having only html
2.dynamic user interface
  data and html

Data binding:
............
 {variable/expression/literal}
data can be primitive /object/array.


Data can be passed in react two ways

1.From outside component - props pattern
2.Within Component - state pattern

Props pattern : data is passed from parent to child component - one way data flow/Flex pattern.

Props Pattern:
import React from 'react';
import ReactDOM from 'react-dom/client';

//Child component
//all parameters are received by a component as a single literal object which is called property or props
const Greeter = (props) => {
    console.log(props)
    return <h1>{props.message} {props.name}</h1>
}

//Parent Component
const App = () => {
    //imperative style:Not recommended to call function like this 
    // return Greeter('Subramanian')
    //jsx syntax: declartive style
    return <div>
        <Greeter name="Subramanian" message="Hello" />
        <Greeter name="Karthik" message="Hi" />
    </div>
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);


..................................................................................

import React from 'react';
import ReactDOM from 'react-dom/client';

// const Profile = props => {
//     return <div>
//         <h1>Id : {props.id}</h1>
//         <p>Name : {props.name}</p>
//         <p>Status : {props.status ? "Available" : "Not Available"}</p>
//         <p>Address</p>
//         <address>
//             <p>{props.address.street}</p>
//             <p>{props.address.city}</p>
//             <p>{props.address.state}</p>
//         </address>
//     </div>
// }

//using object destructuring
// const Profile = props => {
//     const { id, name, status, address: { city, street, state } } = props
//     return <div>
//         <h1>Id : {id}</h1>
//         <p>Name : {name}</p>
//         <p>Status : {status ? "Available" : "Not Available"}</p>
//         <p>Address</p>
//         <address>
//             <p>{street}</p>
//             <p>{city}</p>
//             <p>{state}</p>
//         </address>
//     </div>
// }

const Profile = ({ id, name, status, address: { city, street, state } }) => <div>
    <h1>Id : {id}</h1>
    <p>Name : {name}</p>
    <p>Status : {status ? "Available" : "Not Available"}</p>
    <p>Address</p>
    <address>
        <p>{street}</p>
        <p>{city}</p>
        <p>{state}</p>
    </address>
</div>


//Parent Component
const App = () => {
    const address = {
        street: '10th street',
        city: 'Coimbatore',
        state: 'Tamil Nadu'
    }
    return <div>
        <Profile id={1} name="Subramanian" status={true} address={address} />
        <Profile id={2} name="Subramanian" status={true} address={address} />
        <Profile id={3} name="Subramanian" status={true} address={address} />
    </div>
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

.................................................................................
import React from 'react';
import ReactDOM from 'react-dom/client';

const Profile = props => {
    return <div>
        <h1>Id : {props.id}</h1>
        <p>Name : {props.name}</p>
        <p>Status : {props.status ? "Available" : "Not Available"}</p>
        <p>Address</p>
        <address>
            <p>{props.address.street}</p>
            <p>{props.address.city}</p>
            <p>{props.address.state}</p>
        </address>
    </div>
}
//default Props 
Profile.defaultProps = {
    id: 0,
    name: 'default',
    status: false,
    address: {
        street: 'street',
        city: 'city',
        state: 'state'
    }
}




//using object destructuring
// const Profile = props => {
//     const { id, name, status, address: { city, street, state } } = props
//     return <div>
//         <h1>Id : {id}</h1>
//         <p>Name : {name}</p>
//         <p>Status : {status ? "Available" : "Not Available"}</p>
//         <p>Address</p>
//         <address>
//             <p>{street}</p>
//             <p>{city}</p>
//             <p>{state}</p>
//         </address>
//     </div>
// }

// const Profile = ({ id, name, status, address: { city, street, state } }) => <div>
//     <h1>Id : {id}</h1>
//     <p>Name : {name}</p>
//     <p>Status : {status ? "Available" : "Not Available"}</p>
//     <p>Address</p>
//     <address>
//         <p>{street}</p>
//         <p>{city}</p>
//         <p>{state}</p>
//     </address>
// </div>


//Parent Component
const App = () => {
    const address = {
        street: '10th street',
        city: 'Coimbatore',
        state: 'Tamil Nadu'
    }
    return <div>
        {/* <Profile id={1} name="Subramanian" status={true} address={address} /> */}
        <Profile />
        <Profile id={1} name="Subramanian" status={true} address={address} />
        <Profile id={2} name="Ram" status={true} />

    </div>
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

...................................................................................
		How to break the big UI into smaller and smaller Component and how to share data 
			   Uni Directional Data flow model


eg:
 Comment <------------------------------> CommentData
   -UserInfo 
	|
	<Logo/Avatar>
        User Name
        <Comment-Test>
        <Comment-Data>


import React from "react";
import ReactDOM from "react-dom/client";

function formateDate(date) {
    return date.toLocaleDateString()

}

//without breaking 
const Comment = props => {
    return <div className="comment">
        <div className="userinfo">
            {/* Segment -1 */}
            <div className="avatar">
                <img src={props.author.avatarUrl} alt="Author Name" />
            </div>
            {/* Segment 2 */}
            <div className="username">
                <p>{props.author.name}</p>
            </div>
            {/* Segment 3 */}
            <div className="commenttext">
                <p>{props.text}</p>
            </div>
            {/* Segment 4 */}
            <div className="commentdate">
                {formateDate(props.date)}
            </div>
        </div>
    </div>
}

const App = () => {
    //pass data to the comments:this data may come from api later 
    const comment = {
        date: new Date(),
        text: 'React is awesome lib',
        author: {
            name: 'Subramanian',
            avatarUrl: 'http://placekitten.com/g/64/64'
        }
    }

    return <>
        <Comment date={comment.date} text={comment.text} author={comment.author} />
    </>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)
...................................................................................

How to extract Components?
Avatar
UserInfo

import React from "react";
import ReactDOM from "react-dom/client";

function formateDate(date) {
    return date.toLocaleDateString()

}
export const Avatar = props => {
    return <div className="avatar">
        <img src={props.avatarUrl} alt="Author Name" />
    </div>
}
export const User = props => {
    return <div>
        <p>{props.name}</p>
    </div>
}

export const UserInfo = props => {
    return <div className="userinfo">
        <Avatar avatarUrl={props.author.avatarUrl} />
        <User name={props.author.name} />
    </div>
}
export const CommentDetails = props => {
    return <div>
        <div className="commenttext">
            <p>{props.text}</p>
        </div>
        <div className="commentdate">
            {formateDate(props.date)}
        </div>
    </div>
}
//with breaking 
export const Comment = props => {
    return <div className="comment">
        <div className="userinfo">
            <UserInfo author={props.author} />
        </div>
        <div>
            <CommentDetails text={props.text} date={props.date} />
        </div>
    </div>
}


export const App = () => {
    //pass data to the comments:this data may come from api later 
    const comment = {
        date: new Date(),
        text: 'React is awesome lib',
        author: {
            name: 'Subramanian',
            avatarUrl: 'http://placekitten.com/g/64/64'
        }
    }

    return <>
        <Comment date={comment.date} text={comment.text} author={comment.author} />
    </>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)
....................................................................................

Property Rethrow:
import React from "react";
import ReactDOM from "react-dom/client";

//master compoent 
const ProfileMaster = props => <div>
    {/*passing the entire properties to child compoent  */}
    {/* <ProfileDetails id={props.id} name={props.name} status={props.status} address={props.address} /> */}
    {/* Property rethrow: you dont need to pass each and every property manually */}
    <ProfileDetails {...props} title="Profile Details" />
</div>

//details component
const ProfileDetails = props => <div>
    <h1>{props.title}</h1>
    <h1>Id : {props.id}</h1>
    <p>Name : {props.name}</p>
    <p>Status : {props.status ? "Available" : "Not Available"}</p>
    <p>Address</p>
    <address>
        <p>{props.address.street}</p>
        <p>{props.address.city}</p>
        <p>{props.address.state}</p>
    </address>
</div>

export const App = () => {
    const address = {
        street: '10th street',
        city: 'Coimbatore',
        state: 'Tamil Nadu'
    }
    return <ProfileMaster id={1} name="Subramanian" status={true} address={address} />
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)
....................................................................................
....................................................................................
				Event Handling
....................................................................................

Handling events with React elements is very similar to handling events on DOM elements.

Event Listeners:
  are functions/methods are get Executed when something happens on ui element
like click,touch,tap,press..

How to attach event listeners in react?
 React events are named using camelCase , rather than lowercase.

HTML and Js event handlings

<button onclick="save"/>

React syntax

<button onClick={methodName}/>

import React from "react";
import ReactDOM from "react-dom/client";

const style = {
    textAlign: 'center',
}
//state 
class Rating extends React.Component {
    //state declaration
    state = {
        rating: 0
    }
    //listener
    onRate = () => {
        console.log('onRate')
    }

    render() {
        console.log(this.state)
        return <div >
            <h1 style={style}>Rating App</h1>
            <div>
                <h2>Rating : {this.state.rating}</h2>
                <button onClick={this.onRate} >+</button>
            </div>
        </div>
    }
}

const App = () => {
    return <>
        <Rating />
    </>
}

const rootElement = ReactDOM.createRoot(document.getElementById('root'))

rootElement.render(<App />)
.....................................................................................
			  Functional Programming principles
.....................................................................................
                              Pure Functions


Rule A:
  If function receives input, the function returns the same input without any mutation.

//pure functions

//Rule:A
//If function receives input, the function returns the same input without any mutation.

//impure function
// function displayProfile(profile) {
//     profile.city = 'Delhi'
//     return profile
// }
//pure function
function displayProfile(profile) {
    //profile.city = 'Delhi'
    return profile
}
let profile = {
    id: 1,
    name: 'Subramanian',
    city: 'Coimbatore'
}
displayProfile(profile)

import React from 'react';
import ReactDOM from 'react-dom/client';

//Every component is pure function, props are read only 
const Profile = props => {
    //props.city = 'Delhi' 
    return <div>
        <p>{props.id}</p>
        <p>{props.name}</p>
        <p>{props.city}</p>

    </div>
}
const App = () => {
    const profile = {
        id: 1,
        name: 'Subramanian',
        city: 'Coimbatore'

    }
    return <Profile id={profile.id} name={profile.name} city={profile.city} />
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

Rule B:

Rule B:

 What if function receives input, need to be mutated but it should follow the pure function rule.

With help of "Immutablity"

What is immutable?

creating new object every time when you update the object , immutablity.

if the function does that , that function is called pure function.

pure function must return, "immutable object".


//impure function :it does not return immutable object 
// function updateProfile(profile,city) {
//     profile.city = city 
//     return profile ;
// }

//return new object after modifiication/mutation

//way -1 : create new object and copy the all the properties and update the property which you want to modify
// function updateProfile(profile, city) {
//     return {
//         id: profile.id,
//         name: profile.name,
//         city: city
//     }
// }

//way 2 : clone api 
// function updateProfile(profile, city) {
//     return Object.assign({}, profile, { city: city })
// }
//way 3: using spread operator(...)
function updateProfile(profile, city) {
    return { ...profile, city: city }
}
let profile = {
    id: 1,
    name: 'Subramanian',
    city: 'Delhi'
}
console.log('before update', profile)
let result = updateProfile(profile, 'Coimbatore')
console.log('after update', result)
//Test whether function is pure or not: the function returns the same object or different object.
console.log('same profile ', profile === result ? 'same' : 'different')

..................................................................................
				Arrays and immutablity
...................................................................................



//impure function :it does not return immutable object 
// function updateProfile(profile,city) {
//     profile.city = city 
//     return profile ;
// }

//return new object after modifiication/mutation

//way -1 : create new object and copy the all the properties and update the property which you want to modify
// function updateProfile(profile, city) {
//     return {
//         id: profile.id,
//         name: profile.name,
//         city: city
//     }
// }

//way 2 : clone api 
// function updateProfile(profile, city) {
//     return Object.assign({}, profile, { city: city })
// }
//way 3: using spread operator(...)
function updateProfile(profile, city) {
    return { ...profile, city: city }
}
let profile = {
    id: 1,
    name: 'Subramanian',
    city: 'Delhi'
}
console.log('before update', profile)
let result = updateProfile(profile, 'Coimbatore')
console.log('after update', result)
//Test whether function is pure or not: the function returns the same object or different object.
console.log('same profile ', profile === result ? 'same' : 'different')
/////////////////////////////////////////////////////////////////////////////////////
                   //Arrays and immutablity

//impure function
//array push method modifies existing array memory address
//push is mutable api : dont use
// function addTodo(todos, todo) {
//     return todos.push(todo) // modifies the existing array.
// }    
// //pure function
// function addTodo(todos, todo) {
//     return todos.concat(todo) //returns new array after add
// }
function addTodo(todos, todo) {
    return [...todos,todo] //returns new array after add
}
let todos = [{
    title: 'Learn react',
    done: true
}];
Object.freeze(todos)
let addedTodos = addTodo(todos, { title: 'Learn Pure functions', done: false })
console.log(addedTodos)


Array Pure functions api

1.concat - add
2.map - iterations
3.filter - iterations with filtering
4.reduce - iterations with filtering


import React from "react";
import ReactDOM from "react-dom/client";

class Counter extends React.Component {
    //component's data is encapsulated inside state variable
    state = {
        //data 
        counter: 0 // inital state /Current State
    }
    //event listener
    onIncrement = () => {
        // console.log('onIncrement')
        // this.setState((prvState) => {
        //     //return immutable object(immutable state)
        //     return {
        //         counter: prvState.counter + 1
        //     }
        // })
        this.setState((prvState) => {
            //return Object.assign({}, prvState, { counter: prvState.counter + 1 })
            return { ...prvState, counter: prvState.counter + 1 }
        })
    }

    render() {
        console.log(this.state)
        return <div>
            <h1>Counter App</h1>
            <h2>Counter Value {this.state.counter}</h2>
            <button onClick={this.onIncrement}>+</button>
        </div>
    }
}

const App = () => <div>
    <Counter />
</div>

const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)     
....................................................................................
			Component Responsiablity
....................................................................................

The component may have state+biz+ui

if the component having state and biz logic, should not have ui logic, you have to pass state as prop to another component.

Parent - Child
 state  --prop

State as prop -  dynamic props.
.....................................................................................
import React from "react";
import ReactDOM from "react-dom/client";

class Counter extends React.Component {
    state = {
        //data 
        counter: 10 // inital state /Current State
    }
    //event listener
    onIncrement = () => {
        this.setState((prvState) => {
            return { ...prvState, counter: prvState.counter + 1 }
        })
    }

    render() {
        return <CounterDashBoard counter={this.state.counter} onIncrement={this.onIncrement} />
    }
}

//child component
export const CounterDashBoard = props => {
    return <div>
        <h1>Counter App</h1>
        <h2>Counter Value {props.counter}</h2>
        <button onClick={props.onIncrement}>+</button>
    </div>
}

const App = () => <div>
    <Counter />
</div>

const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)     
.....................................................................................
			More state variables

import React from "react";
import ReactDOM from "react-dom/client";

class Comment extends React.Component {
    state = {
        like: 0,
        dislike: 0,
        nutral: 0
    }
    //event listener
    onLike = () => {
        this.setState(prvState => {
            return {
                like: prvState.like + 1,
                dislike: prvState.dislike,
                nutral: prvState.nutral
            }
        })
    }
    onDisLike = () => {
        this.setState(prvState => {
            return {
                like: prvState.like,
                dislike: prvState.dislike + 1,
                nutral: prvState.nutral
            }
        })
    }
    onNutural = () => {
        this.setState(prvState => {
            return {
                like: prvState.like,
                dislike: prvState.dislike,
                nutral: prvState.nutral + 1
            }
        })
    }

    render() {

        console.log('Current State=>', this.state)
        // return <CommentDashBoard like={this.state.like} dislike={this.state.dislike} nutral={this.state.nutral} onLike={this.onLike} onDisLike={this.onDisLike} onNutural={this.onNutural} />
        return <CommentDashBoard {...this.state} onLike={this.onLike} onDisLike={this.onDisLike} onNutural={this.onNutural} />
    }
}

//child component
export const CommentDashBoard = props => {
    return <div>
        <h1>Comment App</h1>
        <h2>Like {props.like} Dislike {props.dislike} Nutral {props.nutral}</h2>
        <button onClick={props.onLike}>Like</button>
        <button onClick={props.onDisLike}>DisLike</button>
        <button onClick={props.onNutural}>Nutral</button>

    </div>
}

const App = () => <div>
    <Comment />
</div>

const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)     
...................................................................................
				List Rendering
import React from "react";
import ReactDOM from "react-dom/client";
import { TODOS } from "./mock-data/todos";

// const TodoList = props => {
//     return <div>
//         <ul>
//             {
//                 props.todos.map(todo => {
//                     return <TodoDetails key={todo.id} title={todo.title} />
//                 })
//             }
//         </ul>
//     </div>
// }

const TodoList = props => {
    return <div>
        <ul>
            {
                props.todos.map(todo => <TodoDetails key={todo.id} title={todo.title} />)
            }
        </ul>
    </div>
}
const TodoDetails = ({ title }) => <li>{title}</li>

const App = () => <div>
    <TodoList todos={TODOS} />
</div>

const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)     
.....................................................................................
			  Component Life cycle
....................................................................................
https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/		

Component Life cycles has three phases

1.mount - inital phase
 constructor
 render - creating v dom / v dom tree
 componentDidMount

2.update

3.unmount



render===>vdom==>fed into target==>componentDidMount

what is role of render?
  Just prepare fresh vdom

What is role componentDidMount?
  any resource intensive tasks

1.timers - any async operations
2.ajax -api calls 
3.websocket calls
4.rxjs subscriptions

..........

eg:
import React, { Component } from "react";
import ReactDOM from "react-dom/client";

class Parent extends Component {
    constructor() {
        super() // calling super class constructor
        console.log('Parent Constructor is called')
    }
    render() {
        console.log('Parent render is called')

        return <div>
                <Child/>
        </div>
    }
    componentDidMount() {
        console.log('Parent did Mount is called')
    }
}


class Child extends Component {
    constructor() {
        super() // calling super class constructor
        console.log('Child Constructor is called')
    }
    render() {
        console.log('Child render is called')

        return <div>

        </div>
    }
    componentDidMount() {
        console.log('Child did Mount is called')
    }
}

const App = () => <div>
    <Parent/>
</div>

const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)     
....................................................................................
			Web service Integration
....................................................................................

ajax apis:
React has no separate ajax apis.

react says you can use any third party ajax libs

1.fetch
2.axios
3.jquery ajax
etc..any ajax...

fetch:
https://developers.google.com/web/shows/google-io/2015/fetch

fetch features:
1.browser native
2.fetch is promise powered

Async:
callbacks
promise with thenables
promise with async await


import React, { Component } from "react";
import ReactDOM from "react-dom/client";

//error Component
const ErrorMessage = props => <div>
    {props.error}
</div>
const Spinner = props => <div>
    <h2>Loading....</h2>
</div>


class Todos extends Component {
    //state to hold data
    state = {
        error: null, // error 
        isLoaded: false, // spinner/loader
        todos: [] // data
    }
    render() {
        //Conditional rendering:based on ui state we need to show component
        const { error, isLoaded, todos } = this.state;
        if (error) {
            return <ErrorMessage error={error} />
        } else if (!isLoaded) {
            return <Spinner />
        } else {
            return <div>
                {
                    todos.map(todo => <div key={todo.id}>
                        <span>{todo.title}</span>
                    </div>)
                }
            </div>
        }
    }
    componentDidMount() {
        //api call to fetch data from the end point 
        // setTimeout(() => {
        //     const url = 'https://jsonplaceholder.typicode.com/todos'
        //     fetch(url)
        //         .then(response => response.json())
        //         .then(todos => {
        //             this.setState(previousState => {
        //                 return {
        //                     ...previousState,
        //                     todos: previousState.todos.concat(todos),
        //                     isLoaded: true
        //                 };
        //             });

        //         }).catch(err => {
        //             console.log(err)
        //         })
        // }, 5000)

        const url = 'https://jsonplaceholder.typicode.com/todos'
        fetch(url)
            .then(response => response.json())
            .then(todos => {
                this.setState(previousState => {
                    return {
                        ...previousState,
                        todos: previousState.todos.concat(todos),
                        isLoaded: true
                    };
                });

            }).catch(err => {
                console.log(err)
            })
    
}
}




const App = () => <div>
    <Todos />
</div>

const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)   

.....................................................................................
Short cut : using async..await..

import React, { Component } from "react";
import ReactDOM from "react-dom/client";

//error Component
const ErrorMessage = props => <div>
    {props.error}
</div>
const Spinner = props => <div>
    <h2>Loading....</h2>
</div>

class Todos extends Component {
    //state to hold data
    state = {
        error: null, // error 
        isLoaded: false, // spinner/loader
        todos: [] // data
    }
    render() {
        //Conditional rendering:based on ui state we need to show component
        const { error, isLoaded, todos } = this.state;
        // Task for you : to organize this ui into separate components
        if (error) {
            return <ErrorMessage error={error} />
        } else if (!isLoaded) {
            return <Spinner />
        } else {
            return <div>
                {
                    todos.map(todo => <div key={todo.id}>
                        <span>{todo.title}</span>
                    </div>)
                }
            </div>
        }
    }
    async componentDidMount() {
        const url = 'https://jsonplaceholder.typicode.com/todos'
        try {
            const todos = await (await fetch(url)).json()
            this.setState({
                todos: todos,
                isLoaded: true
            })
        } catch (error) {
            this.setState({
                isLoaded: true,
                error
            });
        }

    }
}




const App = () => <div>
    <Todos />
</div>

const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)   
..................................................................................					Update Phase

It is called once user starts interaction.

Update cycle triggers because of three things



1.new Props => dynamic props
2.setState  => when ever you mutate the state.
3.forceUpdate => when you want render ui because of some other activites

methods:
 render
 componentDidUpdate
   ->similar to componentDidMount only

 if you want to fetch data from the api after clicking some thing
import React, { Component } from "react";
import ReactDOM from "react-dom/client";

class Parent extends Component {

    state = {
        counter: 0
    }
    constructor() {
        super() // calling super class constructor
        console.log('Parent Constructor is called')
    }
    render() {
        console.log('Parent render is called')

        return <div>
            <h1>{this.state.counter}</h1>
            <Child />
            <button onClick={() => {
                this.setState({ counter: this.state.counter + 1 })
            }}>+</button>
        </div>
    }
    componentDidMount() {
        console.log('Parent did Mount is called')
    }
    componentDidUpdate() {
        console.log('Parent did update is called')

    }
}


class Child extends Component {
    constructor() {
        super() // calling super class constructor
        console.log('Child Constructor is called')
    }
    render() {
        console.log('Child render is called')
        return <div>

        </div>
    }
    componentDidMount() {
        console.log('Child did Mount is called')
    }
    componentDidUpdate() {
        console.log('Child did update is called')

    }
}

const App = () => <div>
    <Parent />
</div>

const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)     

......................................................................................

Conditional Rendering with Selected Item:
import React, { Component } from "react";
import ReactDOM from "react-dom/client";

//error Component
const ErrorMessage = props => <div>
    {props.error}
</div>
const Spinner = props => <div>
    <h2>Loading....</h2>
</div>

const style = {
    cursor: 'pointer'
}
class Todos extends Component {
    //state to hold data
    state = {
        error: null, // error 
        isLoaded: false, // spinner/loader
        todos: [], // data
        todo: null
    }
    onSelected = async (id) => {
        const url = `https://jsonplaceholder.typicode.com/todos/${id}`
        try {
            const todo = await (await fetch(url)).json() // 
            this.setState({
                todo: todo,
            })
            console.log(todo)
        } catch (error) {
            this.setState({
                isLoaded: true,
                error
            });
        }
    }

    render() {
        //Conditional rendering:based on ui state we need to show component
        const { error, isLoaded, todos, todo } = this.state;
        // Task for you : to organize this ui into separate components
        if (error) {
            return <ErrorMessage error={error} />
        } else if (!isLoaded) {
            return <Spinner />
        } else {
            return <div style={{ marginLeft: 150 }}>
                <div style={{ backgroundColor: 'yellow' }}>
                    {todo ? <>
                        <h1>Todo Details</h1>
                        <p>id: {todo.id}</p>
                        <p>title: {todo.title}</p>
                        <p>Status: {todo.completed ? 'Completed' : 'Not Completed'}</p>
                    </> : ''}
                </div>
                <hr />
                {
                    todos.map(todo => <div key={todo.id}>
                        <span onClick={() => {
                            this.onSelected(todo.id)
                        }} style={style}>{todo.title}</span>
                        <hr />
                    </div>)
                }
            </div>
        }
    }
    async componentDidMount() {
        const url = 'https://jsonplaceholder.typicode.com/todos'
        try {
            const todos = await (await fetch(url)).json()
            this.setState({
                todos: todos,
                isLoaded: true
            })
        } catch (error) {
            this.setState({
                isLoaded: true,
                error
            });
        }

    }
}



const App = () => <div>
    <Todos />
</div>

const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)  
.....................................................................................
				Forms
....................................................................................
				EventTarget
How to get User input?


import React, { Component } from "react";
import ReactDOM from "react-dom/client";

class UserInput extends Component {
    state = {
        firstName: ''
    }
    // handleChange = evt => {
    //     //Get Text Box Reference
    //     const target = evt.target
    //     console.log(target.value)
    //     this.setState({
    //         text: evt.target.value
    //     })
    // }
    render() {
        return <div style={{ margin: 50 }}>
            <h1>{this.state.text}</h1>
            <div>
                {/* <input onChange={this.handleChange} /> */}
                {/* on+EventName=> onBlur onUpdate onLeave */}
                <input onChange={(evt) => {
                    const target = evt.target
                    console.log(target.value)
                    this.setState({
                        firstName: evt.target.value
                    })
                }} />
            </div>
            <button onClick={() => {

            }}>Save</button>
        </div>
    }

}



const App = () => <div>
    <UserInput />
</div>

const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)  
...................................................................................
			 Fragements
...................................................................................

JSX Basic rules:

1.Every element must have been closed
const Greeter = props=>{
    return <div>
        {/* element is closed */}
        <h1>hello</h1>
        {/* jsx:comments self closing */}
        <img />
    </div>
}


2.We cant have silbings directly without root element.

const Hello = props => {
    return <p>Hello</p>
          <p>Hai</p>
   
}

compile time error ; no parent containter element.

what if i dont want container element like div,span,header,footer...

In React 16 onwards, react introduced a concept fragments:
   avoid compil time errors

import React  from "react";
import ReactDOM from "react-dom/client";

const Greeter = props => {
    return <div>
        {/* element is closed */}
        <h1>hello</h1>
        {/* jsx:comments self closing */}
        <img />
    </div>
}

// const Hello = props => {
//     return <React.Fragment>
//         <p>Hello</p>
//         <p>Hai</p>
//     </React.Fragment>
// }

// const Hello = props => {
//     return <Fragment>
//         <p>Hello</p>
//         <p>Hai</p>
//     </Fragment>
// }

const Hello = props => {
    return <>
        <p>Hello</p>
        <p>Hai</p>
    </>
}
const App = () => <div>
    <Hello />
</div>

const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)  

eg:
import React  from "react";
import ReactDOM from "react-dom/client";

const Greeter = props => {
    return <div>
        {/* element is closed */}
        <h1>hello</h1>
        {/* jsx:comments self closing */}
        <img />
    </div>
}

// const Hello = props => {
//     return <React.Fragment>
//         <p>Hello</p>
//         <p>Hai</p>
//     </React.Fragment>
// }

// const Hello = props => {
//     return <Fragment>
//         <p>Hello</p>
//         <p>Hai</p>
//     </Fragment>
// }

const Hello = props => {
    return <>
        <p>Hello</p>
        <p>Hai</p>
    </>
}
const App = () => <>
    <Hello />
</>

const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)  
....................................................................................
				Component as Prop
....................................................................................

const Link=()=><ul></ul>

const Header=()=><header>
   <Link/>
</header>
const Page = ()=><Header/>
const App = ()=><Page/>

<Page>
   <Header>
	<Logo></Logo>
	<Link>
	    <MenuBar></MenuBar>
        </Link>
   </Header>
</Page>

import React from "react";
import ReactDOM from "react-dom/client";


const Link = props => {
    return <>
        {props.children}
    </>
}

const Header = props => {
    return <>
        <h1>{props.title}</h1>
        {props.children}
    </>
}
const Footer = props => {
    return <h1>Footer</h1>
}

const Page = props => <>
    {props.children}
</>

const MenuItems = props => <ul>
    <li><a href="#">profile</a></li>
    <li><a href="#">services</a></li>
    <li><a href="#">success stories</a></li>
</ul>


const MenuItems = props => <ul>
     {props.datasource.map(item=>{
       <li><a href=`${item}`>{item}</a></li>
  })}
</ul>

const App = () => <div>
    <Page>
        {/* here Header Component passed as prop */}
        <Header title="Customer Management">
         <hr/>
            <Link>
                <MenuItems datasource={['profile','services','successstores']} />
            </Link>
        </Header>
        <Footer>

        </Footer>
    </Page>
</div>


const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)  
...................................................................................
			     Hooks
..................................................................................

What is hook?
 It is a new feature introduced in react 16.
 Simple abstraction for class compoents-  how to remove classes from react.

Intention is functional component for every things.

objective of hooks:

1.to eleminate class components as much possible.
2.Resuable application behaviours
   eg:ajax calls


Hook is just simple javascript function.
which may take arg or may not.
Which may or may not return something 	


every hook function starts with
  "use"+functionName ==>hook Syntax

eg:
"useState"
"useContext"
"useEffect"
"useAjax"
"useWebSocket"
"useLayout"
etc....
you can create your own hooks as well.

import React, { useState } from "react";
import ReactDOM from "react-dom/client";

class Counter__ extends React.Component {
    //component's data is encapsulated inside state variable
    state = {
        //data 
        counter: 0 // inital state /Current State
    }
    //event listener
    onIncrement = () => {

        this.setState((prvState) => {
            //return Object.assign({}, prvState, { counter: prvState.counter + 1 })
            return { ...prvState, counter: prvState.counter + 1 }
        })
    }

    render() {
        console.log(this.state)
        return <div>
            <h1>Counter App</h1>
            <h2>Counter Value {this.state.counter}</h2>
            <button onClick={this.onIncrement}>+</button>
        </div>
    }
}

//Functional Component using hooks:
const Counter = props => {
    //state declaration
    const [count, setCount] = useState(0)
    const onIncrement = () => {
        // setCount(count => {
        //     return count + 1
        // })
        setCount(count + 1)
    }

    return <div>
        <h1>Counter App</h1>
        <h2>Value : {count}</h2>
        <button onClick={onIncrement}>+</button>
    </div>
}


const App = () => <div>
    <Counter />
</div>
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />) 
.....................................................................................
			Multi state Hook
.....................................................................................

import React, { useState } from "react";
import ReactDOM from "react-dom/client";


const Counter = props => {
    //state declaration => state = {inc:0,dec:100}
    const [inc, setInc] = useState(0)
    const [dec, setDec] = useState(100)
    //listener
    const onIncrement = () => {
        setInc(inc + 1)
    }
    const onIncrementByValue = (value) => {
        setInc(inc + value)
    }
    return <div>
        <h1>Counter App</h1>
        <h2>Increment: {inc} Decrement {dec}</h2>
        <button onClick={onIncrement}>+</button>
        <button onClick={() => setDec(dec - 1)}>-</button>
        <button onClick={() => onIncrementByValue(2)}>DoubleIt</button>

    </div>
}


const App = () => <div>
    <Counter />
</div>
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />) 
..................................................................................
			 Object inside Hook

import React, { useState } from "react";
import ReactDOM from "react-dom/client";


const Counter = props => {
    //state = { counter:{ inc:0,dec:0} }
    const [counter, setCounter] = useState({ inc: 0, dec: 100 })

    const onIncrement = () => {
        //
        // setCounter(counter => {
        //     return { ...counter, inc: counter.inc + 1 }
        // })
        // setCounter(counter =>({ ...counter, inc: counter.inc + 1 }))
        setCounter(({ ...counter, inc: counter.inc + 1 }))

    }

    return <div>
        <h1>Counter App</h1>
        <h2>Increment: {counter.inc} Decrement {counter.dec}</h2>
        <button onClick={onIncrement}>+</button>
        <button onClick={() => setCounter(({ ...counter, dec: counter.dec - 1 }))
        }>-</button>


    </div>
}


const App = () => <div>
    <Counter />
</div>
const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />) 
.....................................................................................
			 Component Life Methods and Hooks
...................................................................................
import React, { Component, useEffect, useState } from "react";
import ReactDOM from "react-dom/client";

//error Component
const ErrorMessage = props => <div>
    {props.error}
</div>
const Spinner = props => <div>
    <h2>Loading....</h2>
</div>


class Todos__ extends Component {
    //state to hold data
    state = {
        error: null, // error 
        isLoaded: false, // spinner/loader
        todos: [] // data
    }
    render() {
        //Conditional rendering:based on ui state we need to show component
        const { error, isLoaded, todos } = this.state;
        if (error) {
            return <ErrorMessage error={error} />
        } else if (!isLoaded) {
            return <Spinner />
        } else {
            return <div>
                {
                    todos.map(todo => <div key={todo.id}>
                        <span>{todo.title}</span>
                    </div>)
                }
            </div>
        }
    }
    componentDidMount() {
        const url = 'https://jsonplaceholder.typicode.com/todos'
        fetch(url)
            .then(response => response.json())
            .then(todos => {
                this.setState(previousState => {
                    return {
                        ...previousState,
                        todos: previousState.todos.concat(todos),
                        isLoaded: true
                    };
                });

            }).catch(err => {
                console.log(err)
            })

    }
}
///////////////////////////////////////////////////////////////////////////////////

const Todos = props => {
    const [items, setItems] = useState({
        error: null, // error 
        isLoaded: false, // spinner/loader
        todos: [] // data
    })
    //componentDidMount
    useEffect(() => {
        const url = 'https://jsonplaceholder.typicode.com/todos'
        fetch(url)
            .then(response => response.json())
            .then(todos => {
                //Change this code in simple way
                setItems(previousState => {
                    return {
                        ...previousState,
                        todos: previousState.todos.concat(todos),
                        isLoaded: true
                    };
                });

            }).catch(err => {
                console.log(err)
            })

    }, [])

    const { error, isLoaded, todos } = items;
    if (error) {
        return <ErrorMessage error={error} />
    } else if (!isLoaded) {
        return <Spinner />
    } else {
        return <div>
            {
                todos.map(todo => <div key={todo.id}>
                    <span>{todo.title}</span>
                </div>)
            }
        </div>
    }
}




const App = () => <div>
    <Todos />
</div>

const rootElement = ReactDOM.createRoot(document.getElementById('root'))
rootElement.render(<App />)   
...................................................................................

Tasks:
1.Code Refactoring
 =>Convert thenables into async..await
2.Select an item and show the item - using Hooks








































				

















